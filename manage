#! /bin/bash

function print_help {
  echo "usage:"
  echo "    ./manage [makemigrations|migrate|clean|rebuild|run|stop]"
}

[[ $# -ne 1 ]] && print_help && exit

cmd=$1
apps=("account" "announcement" "conf" "contest" "options" "problem" "submission")
backend="http://127.0.0.1:7890"
backend_cmd="python3 manage.py runserver"
frontend_cmd="node build/dev-server.js"

function clean {
  rm -rf ./data/zips
  rm -rf ./data/problems
  rm -rf ./data/submissions
  find . -type d -name 'migrations' -not -path './venv/*' | xargs rm -r;
  rm onl.db
  docker rm -f oj-redis-dev
}

function migrate {
  for app in "${apps[@]}"; do
    python3 manage.py makemigrations $app
  done
  python3 manage.py migrate
  python3 manage.py inituser --username=root --password=rootroot --action=create_super_admin
}

function run_onl {
  [[ ! -d data/log ]] && mkdir -p data/log && echo 'mkdir data/log'

  # using postgres
  # docker run -it -d -e POSTGRES_DB=onlinejudge -e POSTGRES_USER=onlinejudge -e POSTGRES_PASSWORD=onlinejudge -p 5435:5432 --name oj-postgres-dev postgres:10-alpine
  
  if ! command which python3 | grep venv > /dev/null; then
    source venv/bin/activate
  fi
  
  # run dramatiq
  if ! command pgrep dramatiq > /dev/null; then
    echo "running dramatiq ..."
    python3 manage.py rundramatiq &>data/log/dramatiq.log &
    [[ $? -ne 0 ]] && echo "Error: fail to run dramatiq"
  else
    echo "dramatiq is already running"
  fi

  # run redis
  if ! command docker container ls | grep redis > /dev/null; then
    echo "running redis in docker ..."
    if ! command docker ps -a | grep redis > /dev/null; then
      docker run -it -d -p 6380:6379 --name oj-redis-dev redis:4.0-alpine > /dev/null
    else
      container_id=$(docker ps -a | grep redis | awk '{print $1}')
      docker container start $container_id
    fi
    [[ $? -ne 0 ]] && echo "Error: fail to run redis docker"
  else
    echo "redis is already running"
  fi

  # run onl
  if ! command pgrep -f "$backend_cmd" > /dev/null; then
    echo "running onl controller ..."
    python3 manage.py runserver 0.0.0.0:7890 &>data/log/onl.log &
    [[ $? -ne 0 ]] && echo "Error: fail to run onl controll"
  else
    echo "onl controller is already running"
  fi

  # run frontend
  if ! command pgrep -f "$frontend_cmd" > /dev/null; then
    echo "running onl frontend ..."
    if [[ -z $FRONTEND ]]; then
      echo "environment variable FRONTEND is empty, you should run frontend yourself"
    else
      fe_log_path="$(pwd)/data/log/npm.log"
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      (cd $FRONTEND; nvm use v8.12.0; TARGET=$backend npm run dev &> $fe_log_path &)
      [[ $? -ne 0 ]] && echo "Error: fail to run onl frontend"
    fi
  else
    echo "onl frontend is already running"
  fi
}

function stop_onl {
  pkill dramatiq
  pkill -f "$backend_cmd"
  docker container stop oj-redis-dev > /dev/null
  pkill -f "$frontend_cmd"
}

case $cmd in
  "make" | "makemigrations" )
    for app in "${apps[@]}"; do
      python3 manage.py makemigrations $app
    done
    ;;
  "migrate" )
    migrate
    ;;
  "clean" )
    clean
    ;;
  "rebuild" )
    clean
    rebuild
    ;;
  "run" )
    run_onl
    ;;
  "stop" )
    stop_onl
    ;;
  * )
    echo "unknown commmand: $cmd"
    print_help
    ;;
esac
