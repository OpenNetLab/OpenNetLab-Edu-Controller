#! /bin/bash

function print_help {
  echo "usage:"
  echo "    ./manage [makemigrations|migrate|clean|rebuild|run|stop]"
}

[[ $# -ne 1 ]] && print_help && exit

cmd=$1
apps=("account" "announcement" "conf" "contest" "options" "problem" "submission")

function clean {
  rm -rf ./data/zips
  rm -rf ./data/problems
  rm -rf ./data/submissions
  find . -type d -name 'migrations' -not -path './venv/*' | xargs rm -r;
  rm onl.db
  docker rm -f oj-redis-dev
}

function migrate {
  for app in "${apps[@]}"; do
    python3 manage.py makemigrations $app
  done
  python3 manage.py migrate
  python3 manage.py inituser --username=root --password=rootroot --action=create_super_admin
}

function run_onl {
  [[ ! -d data/log ]] && mkdir -p data/log && echo 'mkdir data/log'

  # using postgres
  # docker run -it -d -e POSTGRES_DB=onlinejudge -e POSTGRES_USER=onlinejudge -e POSTGRES_PASSWORD=onlinejudge -p 5435:5432 --name oj-postgres-dev postgres:10-alpine
  
  # run dramatiq
  pgrep dramatiq > /dev/null
  if [[ $? -ne 0 ]]; then
    echo "running dramatiq ..."
    python3 manage.py rundramatiq &>data/log/dramatiq.log &
  else
    echo "dramatiq is already running ..."
  fi

  # run redis
  docker container ls | grep redis > /dev/null
  if [[ $? -ne 0 ]]; then
    echo "running redis in docker ..."
    docker ps -a | grep redis > /dev/null
    if [[ $? -ne 0 ]]; then
      docker run -it -d -p 6380:6379 --name oj-redis-dev redis:4.0-alpine > /dev/null
    else
      container_id=$(docker ps -a | grep redis | awk '{print $1}')
      docker container start $container_id
    fi
  else
    echo "redis is already running"
  fi

  # run onl
  pgrep -f "python3 manage.py runserver" > /dev/null
  if [[ $? -ne 0 ]]; then
    echo "running onl ..."
    python3 manage.py runserver 0.0.0.0:7890 &>data/log/onl.log &
  else
    echo "onl is already running ..."
  fi
}

function stop_onl {
  pkill dramatiq
  pkill -f "python3 manage.py runserver"
  docker container stop oj-redis-dev > /dev/null
}

if [[ $cmd == "make" || $cmd == "makemigrations" ]]; then
  for app in "${apps[@]}"; do
    python3 manage.py makemigrations $app
  done
elif [[ $cmd == "migrate" ]]; then
  migrate
elif [[ $cmd == "clean" ]]; then
  clean
elif [[ $cmd == "rebuild" ]]; then
  clean
  migrate
elif [[ $cmd == "run" ]]; then
  run_onl
elif [[ $cmd == "stop" ]]; then
  stop_onl
fi
